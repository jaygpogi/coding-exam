@page "/{participantId}/start"
@inject Common Common
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="startMessage">
    <p>Welcome @Participant.</p>
    <ul>
        @foreach(string instruction in instructions)
        {
            <li>@instruction</li>
        }
    </ul>
</div>
<p>
    <InputCheckbox @bind-Value="instructionsCheck"/> I understand all instructions.
</p>
<button id="startButton" disabled="@isStarting" @onclick="StartExam">@startText</button>

@code {
    [Parameter]
    public string? participantId { get; set; }

    private string? _participant;
    public string? Participant 
    {
        get
        {
            if (string.IsNullOrWhiteSpace(_participant))
            {
                _participant = Common.GetParticipant(participantId);
            }
            return _participant;
        }
    }

    string[] instructions = File.ReadAllLines("Instructions.txt");
    bool instructionsCheck = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CanSubmit();
        }
    }

    string startText = "Start";
    bool isStarting = false;
    private async Task StartExam()
    {
        if (!instructionsCheck)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Tick the checkbox to confirm you understand the instructions.");
            return;
        }
        isStarting = true;
        startText = "Starting...";

        bool canSubmit = await CanSubmit();
        if (canSubmit)
        {
            DateTime? started = await LocalStorage.GetItemAsync<DateTime?>("Started");
            if (started == null)
            {
                await LocalStorage.SetItemAsync<DateTime>("Started", DateTime.Now);
                await Common.SendEmail($"JayG Coding Exam - {Participant} Started", Common.ToSingaporeTime(DateTime.Now).ToString());
            }
            NavigationManager.NavigateTo($"/{participantId}/exam");
        }
    }

    private async Task<bool> CanSubmit()
    {
        DateTime? submitted = await LocalStorage.GetItemAsync<DateTime?>("Submitted");
        if (string.IsNullOrWhiteSpace(participantId)
            || string.IsNullOrWhiteSpace(Participant)
            || submitted != null)
        {
            NavigationManager.NavigateTo("/prohibited");
            return false;
        }

        return true;
    }
}